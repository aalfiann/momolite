
'The MIT License (MIT)

'Copyright(c) 2016 M ABD AZIZ ALFIAN (http://about.me/azizalfian)

'Permission Is hereby granted, free Of charge, to any person obtaining a copy of this software And associated documentation 
'files(the "Software"), To deal In the Software without restriction, including without limitation the rights To use, copy, modify,
'merge, publish, distribute, sublicense, And/Or sell copies Of the Software, And to permit persons to whom the Software Is furnished 
'to do so, subject to the following conditions:

'The above copyright notice And this permission notice shall be included In all copies Or substantial portions Of the Software.

'THE SOFTWARE Is PROVIDED "AS IS", WITHOUT WARRANTY Of ANY KIND, EXPRESS Or IMPLIED, INCLUDING BUT Not LIMITED To THE WARRANTIES Of 
'MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE And NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS Or COPYRIGHT HOLDERS BE LIABLE 
'For ANY CLAIM, DAMAGES Or OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT Or OTHERWISE, ARISING FROM, OUT OF Or IN CONNECTION 
'With THE SOFTWARE Or THE USE Or OTHER DEALINGS In THE SOFTWARE.

Imports System.Windows.Forms
Imports System.Linq
Namespace globals
    ''' <summary>Class Dev</summary>
    ''' <author>M ABD AZIZ ALFIAN</author>
    ''' <lastupdate>17 April 2016</lastupdate>
    ''' <url>http://about.me/azizalfian</url>
    ''' <version>1.3.0</version>
    ''' <requirement>
    ''' - Imports System.Windows.Forms
    ''' </requirement>
    Public Class Dev
        ''' <summary>
        ''' Menampilkan pesan error class exception..
        ''' </summary>
        ''' <remarks>Jika aplikasi sudah production, disarankan untuk tidak menampilkan error message.</remarks>
        Private Shared _errorMessage As Boolean = True
        Private Shared _forceCreateLog As Boolean = False
        Private Shared lastErrorMessage As String = Nothing
        Private Shared allErrorMessage As String = Nothing
        Private Shared _style As FormStyle = FormStyle.WinForm
        Private Shared version As String = "1.39.0.0"
        Private Shared generateFile As String = "##################################################################################################################" + Environment.NewLine _
                                                + "      This file is automatically generated by momo class library - " + version + "." + Environment.NewLine _
                                                + "      It means that there is something wrong with your code when building application.   " + Environment.NewLine _
                                                + "      -----   " + Environment.NewLine _
                                                + "      Author: M ABD AZIZ ALFIAN <http://fb.com/azizalfian>    " + Environment.NewLine _
                                                + "      URL: http://about.me/azizalfian   " + Environment.NewLine _
                                                + "##################################################################################################################" + Environment.NewLine + Environment.NewLine

#Region "Property"
        Public Enum Icons
            Asterisk
            Errors
            Exclamation
            Hand
            Information
            None
            Question
            Stops
            Warning
        End Enum

        Public Enum FormStyle
            WinForm
        End Enum

        ''' <summary>
        ''' Ingin menampilkan pesan error class exception..
        ''' </summary>
        ''' <value>Default value is True</value>
        ''' <returns>Boolean</returns>
        Public Shared Property ShowException As Boolean
            Get
                Return _errorMessage
            End Get
            Set(ByVal value As Boolean)
                If value <> _errorMessage Then
                    _errorMessage = value
                End If
            End Set
        End Property

        ''' <summary>
        ''' Menentukan jenis style Catch Exception. Default = WinForm
        ''' </summary>
        ''' <returns>FormStyle</returns>
        Public Shared Property Style As FormStyle
            Get
                Return _style
            End Get
            Set(ByVal value As FormStyle)
                _style = value
            End Set
        End Property

        ''' <summary>
        ''' Menampilkan semua data exception yang telah tersimpan dalam memori
        ''' </summary>
        ''' <value>String</value>
        ''' <returns>String</returns>
        Public Shared ReadOnly Property AllException As String
            Get
                Return allErrorMessage
            End Get
        End Property

        ''' <summary>
        ''' Menampilkan data exception yang baru saja terjadi
        ''' </summary>
        ''' <value>String</value>
        ''' <returns>String</returns>
        Public Shared ReadOnly Property LastException As String
            Get
                Return lastErrorMessage
            End Get
        End Property

        ''' <summary>
        ''' Tetap membuat file error log walaupun pesan error exception sudah ditampilkan dalam messagebox
        ''' </summary>
        ''' <value>Default = False</value>
        ''' <returns>Boolean</returns>
        Public Shared Property ForceCreateLog As Boolean
            Get
                Return _forceCreateLog
            End Get
            Set(ByVal value As Boolean)
                If value <> _forceCreateLog Then
                    _forceCreateLog = value
                End If
            End Set
        End Property
#End Region

        ''' <summary>
        ''' Format error message yang digunakan untuk log error class library
        ''' </summary>
        ''' <param name="statusLog">Status log</param>
        ''' <param name="formatTime">Format waktu dari error message. Default = "yyyy-MM-dd HH:mm:ss"</param>
        ''' <param name="delimitter">Karakter pemisah antara waktu dan status log. Default = " : "</param>
        ''' <param name="autoNewLine">Membuat baris baru setelah statuslog secara otomatis. Default = 1</param>
        ''' <param name="idFunction">Tentukan ID fungsi / prosedur Anda. Default = Nothing. [Contoh: 0x0001 / Fungsi001]</param>
        ''' <param name="indexProcess">Index proses stackframe. Default = 2</param>
        ''' <param name="pathFunction">Tentukan path fungsi / prosedur. Default = Nothing. [Contoh: momolite.globals.Dev]</param>
        ''' <param name="typeError">Menentukan tingkatan level apakah fungsi masuk dalam kategori error atau peringatan. Default= "Error"</param>
        ''' <returns>String</returns>
        Private Shared Function LogErrorMessage(statusLog As String, Optional typeError As String = "Error", Optional idFunction As String = Nothing, Optional pathFunction As String = Nothing, Optional indexProcess As Integer = 2, Optional formatTime As String = "yyyy-MM-dd HH:mm:ss", Optional delimitter As String = " : ",
                                               Optional autoNewLine As Integer = 1) As String
            Dim log As String = Nothing
            Dim out As Integer = indexProcess
            Dim indev As Integer = out - 1
            Dim ID As String = Nothing, PATH As String = Nothing, TYPE As String = Nothing
            If typeError <> Nothing Then TYPE = "[" + typeError + "]"
            If idFunction <> Nothing Then ID = "[" + idFunction + "]"
            If pathFunction <> Nothing Then PATH = "[" + pathFunction + "]"
            Try
                Dim stackframe As New System.Diagnostics.StackFrame(out)
                If autoNewLine <> 0 Then
                    If statusLog.Length <> 0 Then
                        log = DateTime.Now.ToString(formatTime) + delimitter + TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "] " + statusLog
                        For i As Integer = 0 To autoNewLine - 1
                            log += Environment.NewLine
                        Next
                    Else
                        log = DateTime.Now.ToString(formatTime) + delimitter + TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "] " + statusLog
                    End If
                Else
                    log = DateTime.Now.ToString(formatTime) + delimitter + TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "] " + statusLog
                End If
                Return log
            Catch ex As Exception
                Dim stackframein As New System.Diagnostics.StackFrame(indev)
                If autoNewLine <> 0 Then
                    log = DateTime.Now.ToString(formatTime) + delimitter + "[0x][momolite.globals.Dev]" + "[" + stackframein.GetMethod.Name + "] " + ex.Message
                    For i As Integer = 0 To autoNewLine - 1
                        log += Environment.NewLine
                    Next
                Else
                    log = DateTime.Now.ToString(formatTime) + delimitter + "[0x][momolite.globals.Dev]" + "[" + stackframein.GetMethod.Name + "] " + ex.Message
                End If
                Return log
            Finally
                GC.Collect()
            End Try
        End Function

        ''' <summary>
        ''' Membuat file error log dari exception yang telah tersimpan dalam memory. [Untuk menggunakan fitur ini pastikan Anda menggunakan fungsi momolite.globals.Dev.CatchException]
        ''' </summary>
        ''' <param name="fullPathFile">Lokasi full path file untuk log. Contoh: Application.StartupPath + "/error.log"</param>
        ''' <param name="noteStillError">Pesan pemberitahuan error masih terjadi ke dalam file log. Default = "-- Error Message still occured in the last run application at --"</param>
        ''' <param name="noteStartError">Pesan pemberitahuan error masih terjadi ke dalam file log. Default = "-- Starting Error Log --"</param>
        Public Shared Sub CreateLog(Optional fullPathFile As String = "error.log",
                                    Optional noteStillError As String = "-- Error Message still occured in the last run application at --",
                                    Optional noteStartError As String = "-- Starting Error Log --")
            Try
                Dim fileExists As Boolean = System.IO.File.Exists(fullPathFile)
                Using sw As New System.IO.StreamWriter(System.IO.File.Open(fullPathFile, System.IO.FileMode.Append))
                    sw.Write(
                        IIf(fileExists,
                            IIf(allErrorMessage <> Nothing, Environment.NewLine + noteStillError + " " & DateTime.Now.ToString + Environment.NewLine + Environment.NewLine + allErrorMessage, Nothing),
                            generateFile + noteStartError + " " & DateTime.Now.ToString + Environment.NewLine + Environment.NewLine + allErrorMessage))
                End Using
            Catch ex As Exception
                CatchException(ex, Icons.Errors, "momolite.globals.Dev")
            End Try
        End Sub

        ''' <summary>
        ''' Mendapatkan informasi exception yang lebih detail dan disimpan ke dalam memory. [Fungsi ini diperlukan untuk membuat file error log]
        ''' </summary>
        ''' <param name="ex">Detail pesan error dari class Exception. [Contoh: ex.Message]</param>
        ''' <param name="icon">Menentukan icon yang akan digunakan dalam popup messagebox.</param>
        ''' <param name="pathFunction">Tentukan path fungsi / prosedur. Default = Nothing. [Contoh: momolite.globals.Dev]</param>
        ''' <param name="idFunction">Tentukan ID fungsi / prosedur Anda. Default = Nothing. [Contoh: 0x0001 / Fungsi001]</param>
        ''' <param name="indexProcess">Index proses stackframe. Default = 2</param>
        ''' <param name="formatTime">Format waktu dari error message. Default = "yyyy-MM-dd HH:mm:ss"</param>
        ''' <param name="delimitter">Karakter pemisah antara waktu dan status log. Default = " : "</param>
        ''' <param name="autoNewLine">Membuat baris baru setelah statuslog secara otomatis. Default = 1</param>
        ''' <remarks>Fungsi ini diperlukan untuk membuat file error log</remarks>
        Public Shared Sub CatchException(ex As Exception, Optional icon As Icons = Icons.Errors, Optional pathFunction As String = Nothing,
                                         Optional idFunction As String = Nothing, Optional indexProcess As Integer = 2,
                                         Optional formatTime As String = "yyyy-MM-dd HH:mm:ss",
                                         Optional delimitter As String = " : ", Optional autoNewLine As Integer = 1)
            Try
                Dim ID As String = Nothing, PATH As String = Nothing, TYPE As String = Nothing
                Dim out As Integer = indexProcess - 1
                Dim tipe As String
                Select Case icon
                    Case Icons.Asterisk
                        tipe = "Asterisk"
                    Case Icons.Errors
                        tipe = "Error"
                    Case Icons.Exclamation
                        tipe = "Exclamation"
                    Case Icons.Hand
                        tipe = "Hand"
                    Case Icons.Information
                        tipe = "Information"
                    Case Icons.None
                        tipe = Nothing
                    Case Icons.Question
                        tipe = "Question"
                    Case Icons.Stops
                        tipe = "Stop"
                    Case Icons.Warning
                        tipe = "Warning"
                    Case Else
                        tipe = "Error"
                End Select
                If tipe <> Nothing Then TYPE = "[" + tipe + "]"
                If idFunction <> Nothing Then ID = "[" + idFunction + "]"
                If pathFunction <> Nothing Then PATH = "[" + pathFunction + "]"
                Dim stackframe As New System.Diagnostics.StackFrame(out)
                If ShowException = True Then
                    Select Case Style
                        Case FormStyle.WinForm
                            Select Case icon
                                Case Icons.Asterisk
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Asterisk)
                                Case Icons.Errors
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Error)
                                Case Icons.Exclamation
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
                                Case Icons.Hand
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Hand)
                                Case Icons.Information
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Information)
                                Case Icons.None
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.None)
                                Case Icons.Question
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Question)
                                Case Icons.Stops
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Stop)
                                Case Icons.Warning
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Warning)
                                Case Else
                                    MessageBox.Show(TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString & vbCrLf & ex.Source.ToString, tipe, MessageBoxButtons.OK, MessageBoxIcon.Error)
                            End Select

                    End Select

                    If ForceCreateLog = True Then allErrorMessage += LogErrorMessage(ex.Message.ToString, tipe, idFunction, pathFunction, indexProcess, formatTime, delimitter, autoNewLine)
                Else
                    allErrorMessage += LogErrorMessage(ex.Message.ToString, tipe, idFunction, pathFunction, indexProcess, formatTime, delimitter, autoNewLine)
                End If
                lastErrorMessage = DateTime.Now.ToString(formatTime) + delimitter + TYPE + ID + PATH + "[" + stackframe.GetMethod.Name + "]" + " " + ex.Message.ToString
            Catch exs As Exception
                CatchException(exs, Icons.Errors, "momolite.globals.Dev")
            End Try
        End Sub

    End Class
End Namespace
